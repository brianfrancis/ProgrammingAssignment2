install.packages("slidify")
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
library(slidify)
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
install.package(KernSmooth)
isntall.package("KernSmooth")
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
setwd("C:/Users/bfrancis/Desktop/Coursera/R-Programming/ProgrammingAssignment2")
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
ls
ls()
?rnorm
rnorm(100)
?matrix
m <- matrix(rnorm(100), 10,10)
m
cacheSolve(m)
makeCacheMatrix()
cacheSolve(m)
ls
ls()
f <- makeCacheMatrix()
f(m)
f
ls()
rm(f)
makeCache(m)
makeCacheMatrix(m)
ls
ls()
cacheSolve(makeCacheMatrix)
cacheSolve(makeCacheMatrix(m))
ls()
View(m)
f <- makeCacheMatrix(m)
cacheSolve(f)
t <- cacheSolve(f)
cacheSolve(f)
cacheSolve(makeCacheMatrix(m))
cacheSolve(makeCacheMatrix(m))
View(t)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
ls()
rm(f,t)
f <- makeCacheMatrix(m)
cacheSolve(f)
cacheSolve(f)
f$get()
f$getinverse()
ls(environment(f))
ls(environment(f$get))
ls(f)
ls(environment(f()))
ls(environment(f())
?environment
environment(f)
environment(f$get)
environment(f$get())
environment(f$get
)
ls(environment(f$get))
ls(environment(f$x))
ls(environment(f))
ls(environment(f$getinverse))
ls()
rm(f)
f <- makeCacheMatrix()
cacheSolve(f(m))
cacheSolve(f, m)
f <- makeCacheMatrix(m)
t <- cacheSolve(f)
t <- cacheSolve(f)
m <- matrix(rnorm(100),10,10)
f <- makeCacheMatrix(m)
t <- cacheSolve(f)
t <- cacheSolve(f)
f <- makeCacheMatrix(m)
t <- cacheSolve(f)
t <- cacheSolve(f)
m <- matrix(rnorm(100),10,10)
t <- cacheSolve(f)
